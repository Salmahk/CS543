/* 
This is a test sketch for the Adafruit assembled Motor Shield for Arduino v2
It won't work with v1.x motor shields! Only for the v2's with built in PWM
control

For use with the Adafruit Motor Shield v2 
---->  http://www.adafruit.com/products/1438

CS543 - Lab 3
Soheil Kianzad & Salma Kashani
*/

//#include <Wire.h>
#include <Adafruit_MotorShield.h>
#include "utility/Adafruit_MS_PWMServoDriver.h"
int redPin = 3;   // Red LED,   connected to digital pin 9
int grnPin = 5;  // Green LED, connected to digital pin 10
int bluPin = 6;
int sensorPin = 0; 
int sensorPin1 = 1; 
int flag1=0;
char incomingByte = 'a';  
// Color arrays
int black[3]  = { 0, 0, 0 };
int white[3]  = { 100, 100, 100 };
int red[3]    = { 100, 0, 0 };
int green[3]  = { 0, 100, 0 };
int blue[3]   = { 0, 0, 100 };
int yellow[3] = { 40, 95, 0 };
int dimWhite[3] = { 30, 30, 30 };
// etc.

// Set initial color
int redVal = black[0];
int grnVal = black[1]; 
int bluVal = black[2];

int wait = 1;      // 10ms internal crossFade delay; increase for slower fades
int hold = 0;       // Optional hold when a color is complete, before the next crossFade
int DEBUG = 1;      // DEBUG counter; if set to 1, will write values back via serial
int loopCount = 60; // How often should DEBUG report?
int repeat = 1;     // How many times should we loop before stopping? (0 for no stop)
int j = 0;   
int prevR = redVal;
int prevG = grnVal;
int prevB = bluVal;
// Loop counter for repeat
// Create the motor shield object with the default I2C address
Adafruit_MotorShield AFMS = Adafruit_MotorShield(); 
// Or, create it with a different I2C address (say for stacking)
// Adafruit_MotorShield AFMS = Adafruit_MotorShield(0x61); 

// Select which 'port' M1, M2, M3 or M4. In this case, M1
Adafruit_DCMotor *myMotor = AFMS.getMotor(1);
// You can also make another motor on port M2
//Adafruit_DCMotor *myOtherMotor = AFMS.getMotor(2);

void setup() {
   pinMode(redPin, OUTPUT);   // sets the pins as output
  pinMode(grnPin, OUTPUT);   
  pinMode(bluPin, OUTPUT); 
  Serial.begin(9600);           // set up Serial library at 9600 bps
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

  AFMS.begin();  // create with the default frequency 1.6KHz
  //AFMS.begin(1000);  // OR with a different frequency, say 1KHz
  
  // Set the speed to start, from 0 (off) to 255 (max speed)
 // myMotor->setSpeed(150);
  //myMotor->run(FORWARD);
  // turn on motor
 // myMotor->run(RELEASE);
}

void loop() {
  uint8_t i;
   int reading = analogRead(sensorPin);
      int reading1 = analogRead(sensorPin1); 
 
     float voltage = reading * 5.0;
          float voltage1 = reading1 * 5.0;

 voltage /= 1024.0; 
  voltage1 /= 1024.0; 

 // print out the voltage
 //Serial.print(voltage); Serial.println(" volts");

 // now print out the temperature
 float temperatureC = (voltage - 0.67) * 100 ;
 Serial.print(temperatureC); Serial.println(" degrees C");
 //Serial.println(voltage1);

if (Serial.available() > 0) {
                // read the incoming byte:
                incomingByte = Serial.read();

                // say what you got:
                Serial.print("I received: ");
                Serial.println(incomingByte, DEC);}
    if (incomingByte=='a'){
   myMotor->setSpeed(0);
   crossFade(black);
    }            
   
//   switch(incomingByte){
//   case 'a':
//   //crossFade(blue);
//   break;
//   default:
 if (voltage1>0.050 && temperatureC<=30 ){
   myMotor->setSpeed(0);
   crossFade(blue);
 }

 
    if (temperatureC>=40 ){
      
    myMotor->run(FORWARD);
  for (i=0; i<128; i++) {
    myMotor->setSpeed(i);  
    delay(1);
  }
  for (i=128; i!=0; i--) {
    myMotor->setSpeed(i);  
    delay(1);
  }
  myMotor->run(BACKWARD);
  for (i=0; i<125; i++) {
    myMotor->setSpeed(i);  
    delay(1);
  }
  for (i=125; i!=0; i--) {
    myMotor->setSpeed(i);  
    delay(1);
       }
   
    //myMotor->setSpeed(0);
      int redVal = red[0];
  int grnVal = red[1]; 
  int bluVal = red[2];
   analogWrite(redPin, redVal);   // Write current values to LED pins
    analogWrite(grnPin, grnVal);      
    analogWrite(bluPin, bluVal);
    //flag1==1;
      //do something when var equals 1
    }
     if (voltage1==0 && temperatureC<=50 &&incomingByte!='a'){
       int redVal = black[0];
        int grnVal = black[1]; 
        int bluVal = black[2];
         analogWrite(redPin, redVal);   // Write current values to LED pins
         analogWrite(grnPin, grnVal);      
         analogWrite(bluPin, bluVal);
       myMotor->run(FORWARD);
  for (i=100; i<201; i++) {
    myMotor->setSpeed(i);  
    delay(1);
  }
  for (i=200; i!=100; i--) {
    myMotor->setSpeed(i);  
    delay(1);
  }
  myMotor->run(BACKWARD);
  for (i=100; i<200; i++) {
    myMotor->setSpeed(i);  
    delay(1);
  }
  for (i=200; i!=100; i--) {
    myMotor->setSpeed(i);  
    delay(1);
  }
     }
    if (temperatureC<40&& temperatureC>=30  ){
    myMotor->setSpeed(0);
      crossFade(green);
    }
  
    } 
   

      // if nothing else matches, do the default
      // default is optional
//   break;
//}           
 


int calculateStep(int prevValue, int endValue) {
  int step = endValue - prevValue; // What's the overall gap?
  if (step) {                      // If its non-zero, 
    step = 1020/step;              //   divide by 1020
  } 
  return step;
}

/* The next function is calculateVal. When the loop value, i,
*  reaches the step size appropriate for one of the
*  colors, it increases or decreases the value of that color by 1. 
*  (R, G, and B are each calculated separately.)
*/

int calculateVal(int step, int val, int i) {

  if ((step) && i % step == 0) { // If step is non-zero and its time to change a value,
    if (step > 0) {              //   increment the value if step is positive...
      val += 1;           
    } 
    else if (step < 0) {         //   ...or decrement it if step is negative
      val -= 1;
    } 
  }
  // Defensive driving: make sure val stays in the range 0-255
  if (val > 255) {
    val = 255;
  } 
  else if (val < 0) {
    val = 0;
  }
  return val;
}
void crossFade(int color[3]) {
  // Convert to 0-255
  int R = (color[0] * 255) / 100;
  int G = (color[1] * 255) / 100;
  int B = (color[2] * 255) / 100;

  int stepR = calculateStep(prevR, R);
  int stepG = calculateStep(prevG, G); 
  int stepB = calculateStep(prevB, B);

  for (int i = 0; i <= 1020; i++) {
    redVal = calculateVal(stepR, redVal, i);
    grnVal = calculateVal(stepG, grnVal, i);
    bluVal = calculateVal(stepB, bluVal, i);

    analogWrite(redPin, redVal);   // Write current values to LED pins
    analogWrite(grnPin, grnVal);      
    analogWrite(bluPin, bluVal); 

    delay(wait); // Pause for 'wait' milliseconds before resuming the loop

    if (DEBUG) { // If we want serial output, print it at the 
      if (i == 0 or i % loopCount == 0) { // beginning, and every loopCount times
        
      } 
      DEBUG += 1;
    }
  }
    prevR = redVal; 
  prevG = grnVal; 
  prevB = bluVal;
}
